//
// Created by pierr on 27/10/2023.
//
#include "Core6845.h"

#include <array>

namespace Astra::CPU::Lib::Monitors {
    static const std::array<std::array<BYTE, 3>, 16> COLORS = {
            std::array<BYTE, 3>{0, 0, 0},
            {0,   0,   170},
            {0,   170, 0},
            {0,   170, 170},
            {170, 0,   0},
            {170, 0,   170},
            {170, 85,  0},
            {170, 170, 170},
            {85,  85,  85},
            {85,  85,  255},
            {85,  255, 85},
            {85,  255, 255},
            {255, 85,  85},
            {255, 85,  255},
            {255, 255, 85},
            {255, 255, 255}
    };

    static const std::array<unsigned char, 2048> font = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
            0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,
            0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,
            0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x92, 0x10, 0x7C,
            0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,
            0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
            0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
            0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
            0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
            0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
            0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
            0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
            0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,
            0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
            0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,
            0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
            0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,
            0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
            0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,
            0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0x86, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,
            0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
            0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
            0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,
            0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,
            0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,
            0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00,
            0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
            0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00,
            0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
            0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
            0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
            0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
            0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,
            0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
            0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
            0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
            0x7C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x7C, 0x00,
            0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
            0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,
            0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
            0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,
            0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
            0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,
            0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
            0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00,
            0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
            0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,
            0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00,
            0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,
            0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00,
            0x7C, 0xC6, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00,
            0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,
            0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
            0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
            0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
            0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,
            0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00,
            0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
            0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,
            0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
            0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,
            0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
            0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
            0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
            0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x0E, 0x00,
            0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,
            0x7C, 0xC6, 0xE0, 0x78, 0x0E, 0xC6, 0x7C, 0x00,
            0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
            0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
            0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
            0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00,
            0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
            0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,
            0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
            0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
            0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
            0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x38, 0x6C, 0x64, 0xF0, 0x60, 0x60, 0xF0, 0x00,
            0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,
            0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78,
            0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
            0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xD6, 0x00,
            0x00, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
            0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,
            0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
            0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0xF0, 0x00,
            0x00, 0x00, 0x7C, 0xC0, 0x70, 0x1C, 0xF8, 0x00,
            0x10, 0x30, 0xFC, 0x30, 0x30, 0x34, 0x18, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
            0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
            0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,
            0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
            0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
            0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
            0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x0C, 0x06, 0x7C,
            0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x7E, 0x81, 0x3C, 0x06, 0x3E, 0x66, 0x3B, 0x00,
            0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x00, 0x00, 0x7C, 0xC6, 0xC0, 0x78, 0x0C, 0x38,
            0x7E, 0x81, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x7C, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
            0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xC6, 0x10, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
            0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00,
            0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
            0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00,
            0x78, 0x84, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x78, 0x84, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
            0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
            0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
            0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00,
            0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x30, 0xFC, 0x30,
            0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC3,
            0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
            0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
            0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
            0x00, 0xF8, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0x00,
            0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
            0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00,
            0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
            0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3C, 0x00,
            0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00,
            0xC6, 0xCC, 0xD8, 0x36, 0x6B, 0xC2, 0x84, 0x0F,
            0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6D, 0xCF, 0x03,
            0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x18, 0x00,
            0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
            0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
            0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
            0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
            0xDB, 0xF6, 0xDB, 0x6F, 0xDB, 0x7E, 0xD7, 0xED,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36,
            0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
            0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
            0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
            0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36,
            0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
            0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
            0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00,
            0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
            0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
            0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00,
            0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
            0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0,
            0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
            0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC,
            0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
            0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00,
            0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00,
            0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
            0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00,
            0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
            0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00,
            0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00,
            0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00,
            0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
            0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
            0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00,
            0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
            0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
            0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
            0x58, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00,
            0x70, 0x98, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    void Core6845::Reset() {
        m_index = 0;
        m_vShift = 0;
        m_retrace = 0;
        m_registers = {};
        m_screenData.fill(0);
        yIndex = 0;
        xIndex = 0;
    }

    static int bit_on(unsigned char c, int n) {
        return c & (1 << (7 - n));
    }


    void Core6845::Execute() {
        if (xIndex == 80) {
            xIndex = 0;
            yIndex++;

            if (yIndex == 25) {
                yIndex = 0;
            }
        }

        auto yIndexShifted = (yIndex + m_vShift) % 25;

        int index = 2 * (xIndex + yIndexShifted * 80);
        const BYTE character = m_screenData[index];
        const BYTE attribute = m_screenData[index + 1];

        const auto& bgColor = COLORS[(attribute >> 4) & 0b111];
        const auto& charColor = COLORS[attribute & 0b1111];

        int screenMaxX = 640 * 3;

        int screenPosX = xIndex * 8 * 3;
        int screenPosY = yIndex * 8;

        for (int y = 0; y < 8; y++) {
            int screenIndex = (screenPosY + y) * screenMaxX + screenPosX;
            for (int x = 0; x < 8; x++) {
                int i = screenIndex + (x * 3);

                const auto chr = font[(character * 8) + y];
                const auto& finalColor = bit_on(chr, x) ? charColor : bgColor;

                m_video->Push(DataFormat::Byte, i + 0, finalColor[0]);
                m_video->Push(DataFormat::Byte, i + 1, finalColor[1]);
                m_video->Push(DataFormat::Byte, i + 2, finalColor[2]);
            }
        }

        xIndex++;
    }

    static const std::vector<std::pair<size_t, size_t>> addrList = {{16,   0x3d0},
                                                                    {4000, 0xb8000},
                                                                    {1, 0}};

    const std::vector<std::pair<size_t, size_t>>* Core6845::GetDeviceAddressList() const {
        return &addrList;
    }

    LARGE Core6845::Fetch(DataFormat fmt, size_t address) {
        if (address == 0) {
            return m_vShift;
        } else if (address == 0x3da) {
            // Simulate vertical/horizontal retracing.
            m_retrace = ++m_retrace % 4;
            switch (m_retrace) {
                case 0:
                    return 8;    // VR started
                case 1:
                    return 0;    // VR ended
                case 2:
                    return 1;    // HR started
                case 3:
                    return 0;    // HR ended
                default:
                    break;
            }
        } else if (address >= 0xb8000 && address < 0xb8000 + m_screenData.size()) {
            if (fmt == DataFormat::Byte) {
                return m_screenData[address - 0xb8000];
            } else {
                return *(WORD*)(m_screenData.data() + address - 0xb8000);
            }
        }

        return 0;
    }

    void Core6845::Push(DataFormat fmt, size_t address, LARGE val) {
        if (address == 0) {
            m_vShift = val % 25;
        } else if (address == 0x3d4) {
            m_index = val;
        } else if (address == 0x3d5) {
            m_registers[m_index] = val;
        } else if (address >= 0xb8000 && address < 0xb8000 + m_screenData.size()) {
            if (fmt == DataFormat::Byte) {
                m_screenData[address - 0xb8000] = (BYTE) val;
            } else {
                *(WORD*)(m_screenData.data() + address - 0xb8000) = (WORD) val;
            }
        }
    }

    int Core6845::FetchReadOnly(size_t address) const {
        if (address == 0) {
            return m_vShift;
        }

        if (address >= 0xb8000 && address < 0xb8000 + m_screenData.size()) {
            return m_screenData[address - 0xb8000];
        }

        return -1;
    }

    bool Core6845::IsInit() const {
        return (m_video && m_video->Fetch(DataFormat::Word, 0) == 640 && m_video->Fetch(DataFormat::Word, 2) == 200);
    }

    bool Core6845::IsComplete() const {
        return xIndex == 80 && yIndex == 24;
    }
}
